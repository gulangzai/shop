/**
 * bootbox.js [v4.2.0]
 * 
 * http://bootboxjs.com/license.txt
 */
(function(d, c) {
	if (typeof define === "function" && define.amd) {
		define([ "jquery" ], c)
	} else {
		if (typeof exports === "object") {
			module.exports = c(require("jquery"))
		} else {
			d.bootbox = c(d.jQuery)
		}
	}
}
		(
				this,
				function init(x, D) {
					var t = {
						dialog : "<div class='bootbox modal' tabindex='-1' role='dialog'><div class='modal-dialog'><div class='modal-content'><div class='modal-body'><div class='bootbox-body' style='margin-top:20px;margin-bottom:20px;font-size:16px;font-family:Microsoft YaHei'></div></div></div></div></div>",
						header : "<div class='modal-header' style='padding:5px;background-color:#eff3f8;'><h4 class='modal-title'></h4></div>",
						footer : "<div class='modal-footer'></div>",
						closeButton : "<button type='button' class='bootbox-close-button close' data-dismiss='modal' aria-hidden='true'>&times;</button>",
						form : "<form class='bootbox-form'></form>",
						inputs : {
							text : "<input class='bootbox-input bootbox-input-text form-control' autocomplete=off type=text />",
							textarea : "<textarea class='bootbox-input bootbox-input-textarea form-control'></textarea>",
							email : "<input class='bootbox-input bootbox-input-email form-control' autocomplete='off' type='email' />",
							select : "<select class='bootbox-input bootbox-input-select form-control'></select>",
							checkbox : "<div class='checkbox'><label><input class='bootbox-input bootbox-input-checkbox' type='checkbox' /></label></div>",
							date : "<input class='bootbox-input bootbox-input-date form-control' autocomplete=off type='date' />",
							time : "<input class='bootbox-input bootbox-input-time form-control' autocomplete=off type='time' />",
							number : "<input class='bootbox-input bootbox-input-number form-control' autocomplete=off type='number' />",
							password : "<input class='bootbox-input bootbox-input-password form-control' autocomplete='off' type='password' />"
						}
					};
					var A = {
						locale : "zh_CN",
						backdrop : true,
						animate : true,
						className : null,
						closeButton : false,
						show : true,
						container : "body"
					};
					var y = {};
					function q(a) {
						var b = F[A.locale];
						return b ? b[a] : F.en[a]
					}
					function C(b, c, a) {
						b.stopPropagation();
						b.preventDefault();
						var d = x.isFunction(a) && a(b) === false;
						if (!d) {
							c.modal("hide")
						}
					}
					function w(a) {
						var c, b = 0;
						for (c in a) {
							b++
						}
						return b
					}
					function v(a, b) {
						var c = 0;
						x.each(a, function(e, d) {
							b(e, d, c++)
						})
					}
					function E(c) {
						var a;
						var b;
						if (typeof c !== "object") {
							throw new Error(
									"Please supply an object of options")
						}
						if (!c.message) {
							throw new Error("Please specify a message")
						}
						c = x.extend({}, A, c);
						if (!c.buttons) {
							c.buttons = {}
						}
						c.backdrop = c.backdrop ? "static" : false;
						a = c.buttons;
						b = w(a);
						v(a, function(d, e, f) {
							if (x.isFunction(e)) {
								e = a[d] = {
									callback : e
								}
							}
							if (x.type(e) !== "object") {
								throw new Error("button with key " + d
										+ " must be an object")
							}
							if (!e.label) {
								e.label = d
							}
							if (!e.className) {
								if (b <= 2 && f === b - 1) {
									e.className = "btn-primary"
								} else {
									e.className = "btn-default"
								}
							}
						});
						return c
					}
					function z(c, b) {
						var a = c.length;
						var d = {};
						if (a < 1 || a > 2) {
							throw new Error("Invalid argument length")
						}
						if (a === 2 || typeof c[0] === "string") {
							d[b[0]] = c[0];
							d[b[1]] = c[1]
						} else {
							d = c[0]
						}
						return d
					}
					function u(a, c, b) {
						return x.extend(true, {}, a, z(c, b))
					}
					function B(b, a, c, d) {
						var e = {
							className : "bootbox-" + b,
							buttons : r.apply(null, a)
						};
						return s(u(e, d, c), a)
					}
					function r() {
						var b = {};
						for ( var d = 0, f = arguments.length; d < f; d++) {
							var c = arguments[d];
							var e = c.toLowerCase();
							var a = c.toUpperCase();
							b[e] = {
								label : q(a)
							}
						}
						return b
					}
					function s(c, a) {
						var b = {};
						v(a, function(e, d) {
							b[d] = true
						});
						v(c.buttons, function(d) {
							if (b[d] === D) {
								throw new Error("button key " + d
										+ " is not allowed (options are "
										+ a.join("\n") + ")")
							}
						});
						return c
					}
					y.alert = function() {
						var a;
						a = B("alert", [ "ok" ], [ "message", "callback" ],
								arguments);
						a.title = "信息提示";
						if (a.callback && !x.isFunction(a.callback)) {
							throw new Error(
									"alert requires callback property to be a function when provided")
						}
						a.buttons.ok.callback = a.onEscape = function() {
							if (x.isFunction(a.callback)) {
								return a.callback()
							}
							return true
						};
						return y.dialog(a)
					};
					y.confirm = function() {
						var a;
						a = B("confirm", [ "cancel", "confirm" ], [ "message",
								"callback" ], arguments);
						a.title = "信息确认";
						a.buttons.cancel.callback = a.onEscape = function() {
							return a.callback(false)
						};
						a.buttons.confirm.callback = function() {
							return a.callback(true)
						};
						if (!x.isFunction(a.callback)) {
							throw new Error("confirm requires a callback")
						}
						return y.dialog(a)
					};
					y.prompt = function() {
						var c;
						var j;
						var f;
						var b;
						var e;
						var k;
						var g;
						b = x(t.form);
						j = {
							className : "bootbox-prompt",
							buttons : r("cancel", "confirm"),
							value : "",
							inputType : "text"
						};
						c = s(u(j, arguments, [ "title", "callback" ]), [
								"cancel", "confirm" ]);
						k = (c.show === D) ? true : c.show;
						var h = [ "date", "time", "number" ];
						var i = document.createElement("input");
						i.setAttribute("type", c.inputType);
						if (h[c.inputType]) {
							c.inputType = i.type
						}
						c.message = b;
						c.buttons.cancel.callback = c.onEscape = function() {
							return c.callback(null)
						};
						c.buttons.confirm.callback = function() {
							var l;
							switch (c.inputType) {
							case "text":
							case "textarea":
							case "email":
							case "select":
							case "date":
							case "time":
							case "number":
							case "password":
								l = e.val();
								break;
							case "checkbox":
								var m = e.find("input:checked");
								l = [];
								v(m, function(o, n) {
									l.push(x(n).val())
								});
								break
							}
							return c.callback(l)
						};
						c.show = false;
						if (!c.title) {
							throw new Error("prompt requires a title")
						}
						if (!x.isFunction(c.callback)) {
							throw new Error("prompt requires a callback")
						}
						if (!t.inputs[c.inputType]) {
							throw new Error("invalid prompt type")
						}
						e = x(t.inputs[c.inputType]);
						switch (c.inputType) {
						case "text":
						case "textarea":
						case "email":
						case "date":
						case "time":
						case "number":
						case "password":
							e.val(c.value);
							break;
						case "select":
							var a = {};
							g = c.inputOptions || [];
							if (!g.length) {
								throw new Error(
										"prompt with select requires options")
							}
							v(g, function(n, m) {
								var l = e;
								if (m.value === D || m.text === D) {
									throw new Error(
											"given options in wrong format")
								}
								if (m.group) {
									if (!a[m.group]) {
										a[m.group] = x("<optgroup/>").attr(
												"label", m.group)
									}
									l = a[m.group]
								}
								l.append("<option value='" + m.value + "'>"
										+ m.text + "</option>")
							});
							v(a, function(m, l) {
								e.append(l)
							});
							e.val(c.value);
							break;
						case "checkbox":
							var d = x.isArray(c.value) ? c.value : [ c.value ];
							g = c.inputOptions || [];
							if (!g.length) {
								throw new Error(
										"prompt with checkbox requires options")
							}
							if (!g[0].value || !g[0].text) {
								throw new Error("given options in wrong format")
							}
							e = x("<div/>");
							v(g, function(n, m) {
								var l = x(t.inputs[c.inputType]);
								l.find("input").attr("value", m.value);
								l.find("label").append(m.text);
								v(d, function(p, o) {
									if (o === m.value) {
										l.find("input").prop("checked", true)
									}
								});
								e.append(l)
							});
							break
						}
						if (c.placeholder) {
							e.attr("placeholder", c.placeholder)
						}
						if (c.pattern) {
							e.attr("pattern", c.pattern)
						}
						b.append(e);
						b.on("submit", function(l) {
							l.preventDefault();
							f.find(".btn-primary").click()
						});
						f = y.dialog(c);
						f.off("shown.bs.modal");
						f.on("shown.bs.modal", function() {
							e.focus()
						});
						if (k === true) {
							f.modal("show")
						}
						return f
					};
					y.dialog = function(e) {
						e = E(e);
						var d = x(t.dialog);
						var g = d.find(".modal-body");
						var a = e.buttons;
						var c = "";
						var b = {
							onEscape : e.onEscape
						};
						v(a, function(i, h) {
							c += "<button data-bb-handler='" + i
									+ "' type='button' class='btn "
									+ h.className + " btn-sm'>" + h.label
									+ "</button>";
							b[i] = h.callback
						});
						g.find(".bootbox-body").html(e.message);
						if (e.animate === true) {
							d.addClass("fade")
						}
						if (e.className) {
							d.addClass(e.className)
						}
						if (e.title) {
							g.before(t.header)
						}
						if (e.closeButton) {
							var f = x(t.closeButton);
							if (e.title) {
								d.find(".modal-header").prepend(f)
							} else {
								f.css("margin-top", "-10px").prependTo(g)
							}
						}
						if (e.title) {
							d.find(".modal-title").html(e.title)
						}
						if (c.length) {
							g.after(t.footer);
							d.find(".modal-footer").html(c)
						}
						d.on("hidden.bs.modal", function(h) {
							if (h.target === this) {
								d.remove()
							}
						});
						d.on("shown.bs.modal", function() {
							d.find(".btn-primary:first").focus()
						});
						d.on("escape.close.bb", function(h) {
							if (b.onEscape) {
								C(h, d, b.onEscape)
							}
						});
						d.on("click", ".modal-footer button", function(i) {
							var h = x(this).data("bb-handler");
							C(i, d, b[h])
						});
						d.on("click", ".bootbox-close-button", function(h) {
							C(h, d, b.onEscape)
						});
						d.on("keyup", function(h) {
							if (h.which === 27) {
								d.trigger("escape.close.bb")
							}
						});
						x(e.container).append(d);
						d.modal({
							backdrop : e.backdrop,
							keyboard : false,
							show : false
						});
						if (e.show) {
							d.modal("show")
						}
						return d
					};
					y.setDefaults = function() {
						var a = {};
						if (arguments.length === 2) {
							a[arguments[0]] = arguments[1]
						} else {
							a = arguments[0]
						}
						x.extend(A, a)
					};
					y.hideAll = function() {
						x(".bootbox").modal("hide")
					};
					var F = {
						br : {
							OK : "OK",
							CANCEL : "Cancelar",
							CONFIRM : "Sim"
						},
						da : {
							OK : "OK",
							CANCEL : "Annuller",
							CONFIRM : "Accepter"
						},
						de : {
							OK : "OK",
							CANCEL : "Abbrechen",
							CONFIRM : "Akzeptieren"
						},
						en : {
							OK : "OK",
							CANCEL : "Cancel",
							CONFIRM : "OK"
						},
						es : {
							OK : "OK",
							CANCEL : "Cancelar",
							CONFIRM : "Aceptar"
						},
						fi : {
							OK : "OK",
							CANCEL : "Peruuta",
							CONFIRM : "OK"
						},
						fr : {
							OK : "OK",
							CANCEL : "Annuler",
							CONFIRM : "D'accord"
						},
						he : {
							OK : "אישור",
							CANCEL : "ביטול",
							CONFIRM : "אישור"
						},
						it : {
							OK : "OK",
							CANCEL : "Annulla",
							CONFIRM : "Conferma"
						},
						lt : {
							OK : "Gerai",
							CANCEL : "Atšaukti",
							CONFIRM : "Patvirtinti"
						},
						lv : {
							OK : "Labi",
							CANCEL : "Atcelt",
							CONFIRM : "Apstiprināt"
						},
						nl : {
							OK : "OK",
							CANCEL : "Annuleren",
							CONFIRM : "Accepteren"
						},
						no : {
							OK : "OK",
							CANCEL : "Avbryt",
							CONFIRM : "OK"
						},
						pl : {
							OK : "OK",
							CANCEL : "Anuluj",
							CONFIRM : "Potwierdź"
						},
						ru : {
							OK : "OK",
							CANCEL : "Отмена",
							CONFIRM : "Применить"
						},
						sv : {
							OK : "OK",
							CANCEL : "Avbryt",
							CONFIRM : "OK"
						},
						tr : {
							OK : "Tamam",
							CANCEL : "İptal",
							CONFIRM : "Onayla"
						},
						zh_CN : {
							OK : "确定",
							CANCEL : "取消",
							CONFIRM : "确认"
						},
						zh_TW : {
							OK : "OK",
							CANCEL : "取消",
							CONFIRM : "確認"
						}
					};
					y.init = function(a) {
						return init(a || x)
					};
					return y
				}));